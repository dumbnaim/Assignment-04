import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import t

# Step 1: Generate 100 random numbers from t-distribution with df=10
degrees_of_freedom = 10
random_numbers = t.rvs(degrees_of_freedom, size=100)

# Step 2: Calculate mean (μ) and standard deviation (σ) of these numbers
population_mean = np.mean(random_numbers)
population_std_dev = np.std(random_numbers)

# Step 3: Create 15 sampling groups, each with 30 samples
num_samples_per_group = 30
num_sampling_groups = 15
sampling_group_means = []

for _ in range(num_sampling_groups):
    sample = np.random.choice(random_numbers, size=num_samples_per_group, replace=False)
    sampling_group_means.append(np.mean(sample))

# Step 4: Calculate the mean of the sampling group means
mean_of_means = np.mean(sampling_group_means)

# Step 5: Verify CLT
# The standard deviation of the sample means (σx) should be close to σ/√n
std_dev_sample_means = np.std(sampling_group_means, ddof=1)
expected_std_dev_sample_means = population_std_dev / np.sqrt(num_samples_per_group)

# Step 6: Plot histogram of the sample means
plt.hist(sampling_group_means, bins='auto', edgecolor='black', alpha=0.7)
plt.xlabel('Sample Means')
plt.ylabel('Frequency')
plt.title('Histogram of Sample Means')
plt.show()

# Step 7: Print results
print(f"Population Mean (μ): {population_mean:.4f}")
print(f"Population Standard Deviation (σ): {population_std_dev:.4f}\n")
print(f"Mean of Sampling Group Means (μx): {mean_of_means:.4f}")
print(f"Standard Deviation of Sampling Group Means (σx): {std_dev_sample_means:.4f}")
print(f"Expected Standard Deviation of Sampling Group Means: {expected_std_dev_sample_means:.4f}")
